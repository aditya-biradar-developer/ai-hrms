// Reset Users Script - Clean slate for testing authentication
require('dotenv').config();
const { supabase } = require('../config/db');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function resetUsers() {
  console.log('\n‚ö†Ô∏è  WARNING: This will delete ALL user data!');
  console.log('This includes:');
  console.log('  - All users');
  console.log('  - All applications');
  console.log('  - All attendance records');
  console.log('  - All leaves');
  console.log('  - All notifications');
  console.log('  - All audit logs');
  console.log('  - All password reset tokens');
  console.log('\n');

  rl.question('Are you sure you want to continue? (type "YES" to confirm): ', async (answer) => {
    if (answer !== 'YES') {
      console.log('\n‚ùå Operation cancelled.');
      rl.close();
      process.exit(0);
    }

    try {
      console.log('\nüóëÔ∏è  Starting cleanup...\n');

      // 1. Delete audit logs
      console.log('1Ô∏è‚É£ Deleting audit logs...');
      const { error: auditError } = await supabase
        .from('audit_logs')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all
      
      if (auditError) {
        console.log('   ‚ö†Ô∏è  Audit logs table might not exist yet');
      } else {
        console.log('   ‚úÖ Audit logs deleted');
      }

      // 2. Delete invitation tokens
      console.log('2Ô∏è‚É£ Deleting invitation tokens...');
      const { error: inviteError } = await supabase
        .from('invitation_tokens')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (inviteError) {
        console.log('   ‚ö†Ô∏è  Invitation tokens table might not exist yet');
      } else {
        console.log('   ‚úÖ Invitation tokens deleted');
      }

      // 3. Delete password reset tokens
      console.log('3Ô∏è‚É£ Deleting password reset tokens...');
      const { error: resetError } = await supabase
        .from('password_resets')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (resetError) {
        console.log('   ‚ö†Ô∏è  Password resets:', resetError.message);
      } else {
        console.log('   ‚úÖ Password reset tokens deleted');
      }

      // 4. Delete notifications
      console.log('4Ô∏è‚É£ Deleting notifications...');
      const { error: notifError } = await supabase
        .from('notifications')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (notifError) {
        console.log('   ‚ö†Ô∏è  Notifications:', notifError.message);
      } else {
        console.log('   ‚úÖ Notifications deleted');
      }

      // 5. Delete leaves
      console.log('5Ô∏è‚É£ Deleting leaves...');
      const { error: leavesError } = await supabase
        .from('leaves')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (leavesError) {
        console.log('   ‚ö†Ô∏è  Leaves:', leavesError.message);
      } else {
        console.log('   ‚úÖ Leaves deleted');
      }

      // 6. Delete attendance
      console.log('6Ô∏è‚É£ Deleting attendance records...');
      const { error: attendanceError } = await supabase
        .from('attendance')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (attendanceError) {
        console.log('   ‚ö†Ô∏è  Attendance:', attendanceError.message);
      } else {
        console.log('   ‚úÖ Attendance records deleted');
      }

      // 7. Delete applications
      console.log('7Ô∏è‚É£ Deleting job applications...');
      const { error: appsError } = await supabase
        .from('applications')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (appsError) {
        console.log('   ‚ö†Ô∏è  Applications:', appsError.message);
      } else {
        console.log('   ‚úÖ Job applications deleted');
      }

      // 8. Delete performance records (must be before users due to foreign key)
      console.log('8Ô∏è‚É£ Deleting performance records...');
      const { error: performanceError } = await supabase
        .from('performance')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (performanceError) {
        console.log('   ‚ö†Ô∏è  Performance:', performanceError.message);
      } else {
        console.log('   ‚úÖ Performance records deleted');
      }

      // 9. Delete payroll records (must be before users due to foreign key)
      console.log('9Ô∏è‚É£ Deleting payroll records...');
      const { error: payrollError } = await supabase
        .from('payroll')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (payrollError) {
        console.log('   ‚ö†Ô∏è  Payroll:', payrollError.message);
      } else {
        console.log('   ‚úÖ Payroll records deleted');
      }

      // 10. Delete jobs (must be before users due to foreign key)
      console.log('üîü Deleting jobs...');
      const { error: jobsError } = await supabase
        .from('jobs')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (jobsError) {
        console.log('   ‚ö†Ô∏è  Jobs:', jobsError.message);
      } else {
        console.log('   ‚úÖ Jobs deleted');
      }

      // 11. Delete users (this will cascade to related data)
      console.log('1Ô∏è‚É£1Ô∏è‚É£ Deleting all users...');
      const { data: deletedUsers, error: usersError } = await supabase
        .from('users')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000')
        .select();
      
      if (usersError) {
        console.error('   ‚ùå Error deleting users:', usersError.message);
      } else {
        console.log(`   ‚úÖ Deleted ${deletedUsers?.length || 0} users`);
      }

      console.log('\n' + '='.repeat(50));
      console.log('‚úÖ CLEANUP COMPLETE!');
      console.log('='.repeat(50));
      console.log('\nüìù Summary:');
      console.log('   ‚Ä¢ All users deleted');
      console.log('   ‚Ä¢ All related data cleaned up');
      console.log('   ‚Ä¢ Database ready for fresh testing');
      console.log('\nüéØ Next steps:');
      console.log('   1. Register a new user');
      console.log('   2. Test email verification');
      console.log('   3. Test account lockout');
      console.log('   4. Check audit logs\n');

    } catch (error) {
      console.error('\n‚ùå Error during cleanup:', error.message);
    } finally {
      rl.close();
      process.exit(0);
    }
  });
}

// Run the script
resetUsers();
